#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# +------------------------------------------------------------------+
#
# This file is an addon for Check_MK.
# The official homepage for this check is at http://bitbucket.org/darkfader
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.



# A check for hardware stuff on Areca raid controllers.

# Voltages and battery
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.1 = INTEGER: 1
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.2 = INTEGER: 2
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.3 = INTEGER: 3
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.4 = INTEGER: 4
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.5 = INTEGER: 5
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.6 = INTEGER: 6
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.7 = INTEGER: 7
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.8 = INTEGER: 8
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.1.9 = INTEGER: 9
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.1 = STRING: "12V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.2 = STRING: "5V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.3 = STRING: "3.3V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.4 = STRING: "DDR-II +1.8V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.5 = STRING: "PCI-E  +1.8V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.6 = STRING: "CPU    +1.8V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.7 = STRING: "CPU    +1.2V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.8 = STRING: "DDR-II +0.9V"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.2.9 = STRING: "Battery Status"
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.1 = INTEGER: 11977
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.2 = INTEGER: 5026
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.3 = INTEGER: 3296
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.4 = INTEGER: 1808
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.5 = INTEGER: 1808
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.6 = INTEGER: 1824
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.7 = INTEGER: 1184
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.8 = INTEGER: 896
#.1.3.6.1.4.1.18928.1.2.2.1.8.1.3.9 = INTEGER: 255

#snmp_info   : oid(".1.3.6.1.4.1.18928.1.2.2.1.8.1"), [ "1", "2", "3" ]

# Turn this into something much sweeter.
# The battery status doesnt really belong in here.
#{'voltages': {'12V': 11977,
#              'Battery Status': 255,
#              '5V': 5053,
#              'PCI-E  +1.8V': 1808}}

def parse_areca(info, what):
    areca_info = {}
    areca_info[what] = {}
    for line in info[0]:
        if len(line) == 3:
            id, sensor_name, value = line
            # remove spaces from the sensor name
            if len(sensor_name.split()) > 1:
                s_parts = sensor_name.split()
                sensor_name = s_parts[0] + " " + s_parts[-1]
            areca_info[what][sensor_name] = saveint(value)
    return areca_info        

def inventory_areca_hba_voltages(info):
    inventory = []

    areca_info = parse_areca(info, "voltages")
    for sensor_name in areca_info["voltages"].keys():
        # Skip the battery sensor, I dont have one, impossible to
        # make the check match for it.
        if sensor_name.lower() != "battery status":
            inventory.append((sensor_name, None))
    return  inventory


def check_areca_hba_voltages(item, _no_params, info):
    areca_info = parse_areca(info, "voltages")
    epsilon = 10
    if item in areca_info["voltages"].keys():
        # i'm fetching the voltage from the label and try to alert on the difference.
        v_cur   = float(areca_info["voltages"][item]) / 1000.0
        v_rated = float(item.split()[-1].replace("V", ""))
        perfdata = [ ( "voltage", v_cur ) ]
        # this is now just a hardcoded level, could be improved.
        if v_cur < v_rated - v_rated / 100*epsilon or v_cur > v_rated + v_rated / 100*epsilon:
            return (1, "WARNING - Voltage is %02.3fV" % v_cur, perfdata)
        else:
            return (0, "OK - Voltage is ok", perfdata)
    return (3, "UNKNOWN - Voltage sensor not found in agent output")


check_info["areca_hba_voltages"]  = {
    "check_function"      : check_areca_hba_voltages,
    "inventory_function"  : inventory_areca_hba_voltages,
    "has_perfdata"        : True,
    "service_description" : "Voltage %s",
    # Find Areca SAS MIB
    "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.18928.1"),
    "snmp_info"           : [(".1.3.6.1.4.1.18928.1.2.2.1.8.1", [ "1", "2", "3" ])],
}

